//////////
//      //
// HTTP //
//      //
//////////

Peticiones HTTP

Método + Ruta a uno o a varios recursos


MÉTODOS HTTP

Métodos que sirven para trabajar con los recursos:

GET	    - Solicita al servidor los recursos identificados por la ruta
POST    - Solicita al servidor la creación de un nuevo recurso en la ruta indicada
PUT     - Solicita al servidor que sustituya los recursos identificados por la ruta por otro 
PATCH	- Solicita al servidor que modifique los recursos identificados por la ruta
DELETE  - Solicita al servidor la eliminación de los recursos identificados por la ruta

Métodos para otras cosas

HEAD
OPTIONS

//////////
//      //
// REST //
//      //
//////////

1- Identificar los recursos

peliculas
    titulo
    año
    sinopsis
    foto

actores

directores

criticas
    puntuacion

series

capitulos

2- Decidir las carpetitas

3- Decidir cuál será la representacion de los recursos

    -json
    -xml
    -csv
    -uno que me invente

4- Diseñar el api


Método  URL            Query Params   Body           Respuesta             Funcionalidad
GET     /peliculas     filtro         -              [ {pelicula} ]        listar peliculas
GET     /peliculas/:id -              -              { pelicula }          buscar película
POST    /peliculas     -              {pelicula}     {pelicula}            insertar peliculas
PUT     /peliculas/:id -              {pelicula}     {pelicula}            modificar pelicula
DELETE  /peliculas/:id -              -              -                     borrar pelicula

/////////
// GET //
/////////

GET /peliculas/5

Respuestas

200 OK
CT: app/json
--------------------
{p5} 


404 NOT FOUND
CT: app/json
--------------------
{
    "codigo"  : "404",
    "mensaje" : "La película no existe"
}


GET /peliculas

Respuestas:

200 OK
CT: app/json
--------------------
[ {p1}, {p2}, {p3} ]


Filtrando los recursos identificados por la ruta con los QUERY PARAMETERS (?)
No son exclusivos de GET

    url       |esto ya no es la url
GET /peliculas?year=1984
GET /peliculas?year=1984&genero=accion
GET /peliculas?activo
GET /peliculas?genero=accion,cienciaFiccion,tiros
    
              |
////////////
// DELETE //
////////////

DELETE /peliculas/87

200 OK
CT:app/json
--------------------
{ "mensaje" : "La película se borró correctamenete" }

404 NOT FOUND
CT: app/json
--------------------
{
    "codigo"  : "404",
    "mensaje" : "La película no existe"
}

Bulk DELETES. Cuidado con ellos!!!!

DELETE /peliculas

DELETE /peliculas?year=2021


//////////
// POST //
//////////

Las rutas de una petición post acaban en carpeta

POST /peliculas
CT: app/json
---------------
{
    "titulo" : "",
    "genero" : ""
}

201 CREATED
CT: app/json
---------------
{
    "_id"    : "",
    "titulo" : "",
    "genero" : ""
}

201 CREATED
CT: app/json
---------------
{
    "_id"    : ""
}

400 BAD REQUEST
CT: app/json
---------------
{
    "codigo"  : "400",
    "mensaje" : "El título es obligatorio"
}


/////////
// PUT //
/////////

Se solicita al servidor que sustituya al recurso identificado en la ruta por otro que se proporciona

BB.DD:

id  titulo  director    genero   año
-------------------------------------
8   Batman  Tim Burton  Accion   1990


PUT /peliculas/8
CT: app/json
----------------
{
    "year" : 1989
}

id  titulo  director    genero   año
-------------------------------------
8   null    null        null     1989


Tambien tenemos sustituciones a granel

PUT /productos
CT: app/json
--------------
{
    "existencias" : 1000
}

¿Que pasa si el id no existe?

Segun el protocolo HTTP se debe insertar un recurso nuevo con los datos suministrados
y devolver un 201 CREATED :(

Tambien podemos ignorar esto último y devolver un 404 NOT FOUND!!!!!!!!!!



///////////
// PATCH //
///////////

BB.DD:

id  titulo  director    genero   año
-------------------------------------
8   Batman  Tim Burton  Accion   1990


PATCH /peliculas/8
CT: app/json
----------------
{
    "year" : 1989
}

id  titulo  director    genero   año
-------------------------------------
8   Batman  Tim Burton  Accion   1989

Si el id no existe se debe responder con un 404 NOT FOUND


///////////////////////////////////
// RELACIONES ENTRE LOS RECURSOS //
///////////////////////////////////

cliente

{
    id :
    nombre :
    direccion :
    cuentaBancaria : 
}

factura 

{
    id :
    codigo :
    fecha :
    cliente :
}


/facturas 
    f1
    f2
    f4
    f8
    f13
    f15
    f20

/clientes
    /c1
        cliente1
        /facturas
            f2
            f8
            f15
    /c2
        cliente2
        /facturas   
            f1
            f4
            f13
            f20


Dame el cliente 43

GET /clientes/43
GET /facturas/87

GET /clientes/43/facturas
GET /clientes/43/incidencias

//Siempre podemos prescindir de las subcarpetas y filtrar por los query parameters:

GET /facturas?idCliente=43
GET /incidencias?idCliente=43

